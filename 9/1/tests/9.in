the input file contains several instances of documents. 
each document starts with a line containing a single integer 
n which indicates the number of sentences in the document the 
following n lines contain each a sentence sentences are numbered 
sequentially in the order they appear in the input the first is
 sentence the second is sentence and so on each sentence has the 
form sentence x is true or sentence x is false where the value 
indicates the end of input for each document in the input your 
program should output one line if the document is consistent your
 program should print the maximum number of sentences in a valid 
truth assignment for the document otherwise your program should 
print the word inconsistent
Программа курса "Современные методы и понятия программирования"

Цели  освоения дисциплины
Целью курса является освоение студентами базовых понятий базовых понятий
 и методов программирования.  Вводная часть курса даёт представление о 
различных сторонах программировании -  как инженерной деятельности, как 
методологии и как научной дисциплины - и их взаимосвязи. Основная часть
 курса построена вокруг рассмотрения языков программирования,  того, 
как используются и реализуются различные языковые конструкции.  
Несмотря на то, что основным языком, рассматривым в курсе, является язык С, 
детальное освоение этого языка не ключевой целью. Практика современного 
программирования такова, что даже в рамках одной системы разработчик использует несколько языков, и способность осознанного выбора подходящего языка и инструментария является одним из основных профессиональных качеств. Достаточно низкий уровень большинства рассматриваемых языков также не случаен: он позволяет проследить не только назначение языковых конструкций, но и насколько эффективную реализацию они допускают. Предполагается, что на основе такого знания студен сможет более осознанно изучать и использовать на практике современные языки более высокого уровня рассматриваемые в последующих курсах.
Таким образом у студента должен быть сформирован кругозор и понимание 
того, что и сами языки программирования являются "живыми" объектами со 
своей логикой развития. Курс представляет базовые средства - БНФ грамматики 
и синтаксические диаграммы - для описания языков программирования.  Большая 
часть курса посвящена рассмотрению наиболее распространённых концепций, 
таких как типы данных, вычисления, управление на уровне выражений и
 операторов, модульная струкутра программы и т.п. При этом стимулируется 
альтернативное рассмотрение различных конструкций, позволяющих реализовать одну и ту же задачу.
Заканчивает курс краткое рассморение вопросов анализа сложности программ, 
в которых методов преобразование и оптимизации программ. Студенты, слушающие 
курс, должны усвоить, что собственно кодирование составляет весьма 
незначительную  часть деятельности программиста, а существенно более важные 
вопросы: понимаемость, сопровождаемость и эффективность программного 
обеспечения.
Лекция 1. Области программирования как научно-технической дисциплины: 
6льзовательское программирование,  системное программирование, технология 
программирования, теоетическое программирование. Логическая модел ЭВМ. 
Дискретная память: байты, биты, слова, адресация. Вычислитель: виды команд 
управление и вычисление. Внешние и внутренние функции операционной системы:
управелние устройствами и ресурсами, запуск процессов, файловая система, 
пользовательский интерфейс. Классификация языков программирования: машинный 
язык, языки макроассемблера,  языки высокого и сверхвысокого уровня. 
Императивные, логические, фукциональные языки программирования. 
Функция 2. Подходы к реализации языков программирования: интерпретаторы, 
трансляторы. Т-диаграммы. Многофазная трансляция, многоуровневая интерпретация, 
кросс-компиляция, раскрутка. Понятие системы программирования: транслятор, исходный код, 
объектный код, редактор связей, загрузчик, готовая программа. Дополнительные средства разработки ПО: 
справочная система, отладчик, средства тестирования и профилирования, средства документирования, 
анализаторы исходного кода, средства сопровождения, версионирования и рефакторинга.

Лекция 3. Понятие языка программирования как знаковой системы. 

Понятие лексики, синтаксиса и семантики. Формальное описание лексики
и синтаксиса. Форма Бэкуса-Наура, регуляризованная БНФ. Проблема 
национальных версий языков программирования. Контекстно-свободный и контекстно-зависимый синтаксис. 
Понятие синтаксического вывода и дерева разбора. Проблема неоднозначности.  
Синтаксические диаграммы. Устойчивость синтаксиса к ошибкам. 
Лекция 4. Контекстно-зависимый анализ, анализ типов. Общее понятие 
 операционной, функциональной и аксиоматической семантиках. Понятие 
стиля в программировании: структурирование текста, мнемоничность имён, 
комментирование исходного текста. Понятие прагматики языковых конструкций. 
Преемственность языков программирования, обратная совместимость.

Лекция 5. Препроцессор: назначение, язык препроцессора. Директивы 
препроцессора на примере языка С: вклчение файлов, определение и использование
 макропеременных, предопределённые макропеременные, условная трансляция,  
конструирование лексем. Проблемы использования препроцессоров: дублирование 
кода, невозможность рекурсии, несоответсвие директив структуре программы, 
Лекции 6. Объекты и типы данных. Области видимости, блочная структура, 
правила поиска. Присоединяющие операторы и квалификация имён. Способы 
импорта библиотечных имён. Анонимные объекты. Понятие типа данных: 
моделируемая категория, синтаксис, множетсво литеральных значений, 
набор операций, реализация доступа к памяти. Статический и динамический 
анализ типов, их достоинтсва и недостатки. Сстрогая типизация. Полиморфизм. 
классификация типов данных: предопределённые и определяемые, простые и 
структурированные, неупорядоченные, упорядоченные и перечислимые,  
арифметические. 

Лекция 7. Описание базовых типов на примере языков С и Pascal. 
Символы как целочисленные коды, необходимость многобайтных кодировок. 
Различные предстваления целых и вещественных чисел. Числа с фиксированной 
и плавающей  точкой, проблема потери точности. Множества и битовые шкалы,
битовая арифметика. Логические значения и логические связки. 
Понятие приведения типов.

Лекция 8. Указатели на примере языка С. Адресная арифметика, 
тип void*. Реализация массивов как указателей. Виды массивы в других 
языках программирования: многомерные, динамические, подвижные,
епрямоугольные, массивы-дескриторы. Массовые операции над массивами 
на примере языков Альфа и APL.  Строки на примере языков С и Pascal.
Лекция 9. Структуры и объединения, понятие выравнивания, псевдооперация 
sizeof. Проблема "дыр" в контроле типов, связанных с типом объединения и 
пример её решения в Algol-68.  Присваивание,как элементарное действия 
менения состояния памяти. Побочные эффекты. Операции, совмещённые с 
присваиванием, инкремент и декремент.
Лекция 10. Управление в программе. Управление на уровне выражений,  
приоритет операций, последовательные и условные выражения, связки Маккарти. 
Управление на уровне операторов:  оператор goto и его недостатки. 
Условные операторы: логические, арифметические, переключатели, переходы по
вычисляемой метке, на примере Pascal, C, Fortran. Оператора цикла: for, while,
epeat, циклы по множеству, переменные и границы цикла. Операторы выхода и
продолжения цикла на примерах языков C, Pascal, Альфа, SETL, Java.
Лекция 11. Распределение памяти: глобальная, автоматическая, динамическая. 
Динамическое создание и удаление объектов и массивов. Накладные расходы и 
пчные ошибки. Автоматическая сборка мусора. Примеры представления 
намических структур данных: деревья, односвязные и двусвязные списки, 
стеки, очереди, упорядоченные списки, вагонная пмять.
Лекция 12. Процедуры и функции: описание и вызов на примере С, формальные 
Yфактические параметры.  Выполнение функции: автоматическая память, 
язывание параметров, выполнение тела. Оператор возврата. Граф вызовов 
и дерево вызовов, поколения переменных. Рекурсия: достоинства и недостатки. 
оженные процедуры на примере Pascal, динамический контекст. 
еменное число параметров, необязательные параметры, позиционные и 
именованные параметры. 
Лекция 13. Виды подстановки параметров. Подстановка параметров  по ссылке, 
процедуры с несколькими результами. Проблема синонимов. Подстановка параметров
 по значению-результату. Строгое и нестрогое вычисление параметров.
одстановка параметров по имени. Подстановка параметров по необходимости. 
Процедурные параметры: функции обратного вызова (callback).

Лекция 14. Реализация функций. Преобразование функций в процедуры.
реобразование в функции с одним параметром. Использование стека фреймов.
еализация возврата из процедуры, вычисляемые метки, устранение процедур.
Перемещение кода.  Обработка исключительных ситуаций: коды ошибок, выход 
 глубокой рекурсии, нелокальные переходы setjmp/longjmp. Модульная струкутра
 программы, классы памяти.

Лекция 15. Ввод-вывод: логические и физические файлы, связь с объектами
 операционной системы. Виды языковых конструкций ввода-вывода: специальны
конструкции, псевдопроцедуры, типизированные процедуры, форматный вывод
 (на пример C, Fortran, Modula-2). Низкоуровневый ввод-вывод: достоинства
 и недостатки. Буферизованный ввод-вывод: типичные ошибки использования файлов. Стандартные файлы ввода-вывода. Форматный вывод: язык форматирования данных.  Ввод-вывод указательных структур данных.
кция 16. Оценка сложности программ: временная и ёмкостная сложность, 
имптотическое поведение. Сравнительный анализ алгоритмов. Примеры
 оптимизации и пессимизации программ.

